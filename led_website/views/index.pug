html
    head
        title= "Text"
    body
        p= thing_id
        p= led_color
        block content
            form(method='POST' action='/things/' + thing_id + "/color" + "?_method=PUT")
                div.form-group
                    section#s_color_picker_id
                        canvas#color_picker(width=200, height=200)
                    input#s_color.form-control(name='color', value=color)
                button.btn.btn-primary(type='submit') Change color
            if timer_locked
                form(method='POST' action='/things/' + thing_id + "/timer" + "?_method=DELETE")
                    button.btn.btn-primary(type='submit') Cancel
            else
                form(method='POST' action='/things/' + thing_id + "/timer")
                    button.btn.btn-primary(type='submit', name ='time', value=3000) 5
                form(method='POST' action='/things/' + thing_id + "/timer")
                    button.btn.btn-primary(type='submit', name ='time', value=3000) 15
                form(method='POST' action='/things/' + thing_id + "/timer")
                    button.btn.btn-primary(type='submit', name ='time', value=3000) 30

            form(method='POST' action='/things/' + thing_id + "/state" + "?_method=PUT")
                button.btn.btn-primary(type='submit', name ='state', value="on") ON

            form(method='POST' action='/things/' + thing_id + "/state" + "?_method=PUT")
                button.btn.btn-primary(type='submit', name ='state', value="off") OFF

            form(method='post', enctype='multipart/form-data', action="/upload/" + thing_id)
                input(type='file', name='upload')
                button.btn.btn-primary(type='submit') Upload
            if image
                img(src="data:image/jpg;base64," + image)
                each color in colors
                    p(style={background: color})=color
    
            script.
                function componentToHex(c) {
                    var hex = c.toString(16);
                    return hex.length == 1 ? "0" + hex : hex;
                }

                function rgbToHex(r, g, b) {
                    return componentToHex(r) + componentToHex(g) + componentToHex(b);
                }

                color_picker = document.getElementById("color_picker");
                color_id = document.getElementById("color_id");
                color_picker.onmousedown = select_color;
                color_picker_add();

                function color_picker_add() {
                    color_picker_ = color_picker.getContext("2d"),
                        center_x = (color_picker.width) / 2,
                        center_y = (color_picker.height) / 2,
                        sx = center_x,
                        sy = center_y;
                    palette = new color_picker_element(center_x, center_y, sx, sy);
                    palette.draw();
                }

                function select_color(e) {
                    let x = e.pageX - color_picker.offsetLeft,
                        y = e.pageY - color_picker.offsetTop,
                        pixel = color_picker.getContext("2d").getImageData(x, y, 1, 1).data,
                        pixelColor = "rgb(" + pixel[0] + ", " + pixel[1] + ", " + pixel[2] + ")";
                    s_color.style.backgroundColor = pixelColor;
                    color = rgbToHex(pixel[0], pixel[1], pixel[2]);
                    s_color.value = color;
                }

                function color_picker_element(center_x, center_y, sx, sy) {
                    this.center_x = center_x;
                    this.center_y = center_y;
                    this.sx = sx;
                    this.sy = sy;
                    this.draw = function () {
                        for (var i = 0; i < 360; i += 0.1) {
                            var rad = (i - 45) * (Math.PI) / 180;
                            color_picker_.strokeStyle = "hsla(" + i + ", 100%, 50%, 1.0)";
                            color_picker_.beginPath();
                            color_picker_.moveTo(center_x, center_y);
                            color_picker_.lineTo(center_x + sx * Math.cos(-rad), center_y + sy * Math.sin(-rad));
                            color_picker_.stroke();
                        }
                    }
                }

            style.
                #s_color_picker_id {
                    text-align: center;
                }

                #color_picker{
                    border-radius: 50%;
                }
                #color_id {
                    height: 100px;
                    background-color: #000;
                }
                #s_color {
                    color: transparent;
                    border: none;
                    width: 50px;
                    height: 50px;
                    border-radius: 50%
                }